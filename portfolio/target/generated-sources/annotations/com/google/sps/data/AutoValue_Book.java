

package com.google.sps.data;

import com.google.common.collect.ImmutableList;

// Generated by com.google.auto.value.processor.AutoValueProcessor
 final class AutoValue_Book extends Book {

  private final String title;
  private final ImmutableList<String> reviews;

  private AutoValue_Book(
      String title,
      ImmutableList<String> reviews) {
    this.title = title;
    this.reviews = reviews;
  }

  @Override
  public String title() {
    return title;
  }

  @Override
  public ImmutableList<String> reviews() {
    return reviews;
  }

  @Override
  public String toString() {
    return "Book{"
         + "title=" + title + ", "
         + "reviews=" + reviews
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Book) {
      Book that = (Book) o;
      return (this.title.equals(that.title()))
           && (this.reviews.equals(that.reviews()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= title.hashCode();
    h$ *= 1000003;
    h$ ^= reviews.hashCode();
    return h$;
  }

  @Override
  public Book.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends Book.Builder {
    private String title;
    private ImmutableList.Builder<String> reviewsBuilder$;
    private ImmutableList<String> reviews;
    Builder() {
    }
    private Builder(Book source) {
      this.title = source.title();
      this.reviews = source.reviews();
    }
    @Override
    public Book.Builder title(String title) {
      if (title == null) {
        throw new NullPointerException("Null title");
      }
      this.title = title;
      return this;
    }
    @Override
    protected ImmutableList.Builder<String> reviewsBuilder() {
      if (reviewsBuilder$ == null) {
        if (reviews == null) {
          reviewsBuilder$ = ImmutableList.builder();
        } else {
          reviewsBuilder$ = ImmutableList.builder();
          reviewsBuilder$.addAll(reviews);
          reviews = null;
        }
      }
      return reviewsBuilder$;
    }
    @Override
    public Book build() {
      if (reviewsBuilder$ != null) {
        this.reviews = reviewsBuilder$.build();
      } else if (this.reviews == null) {
        this.reviews = ImmutableList.of();
      }
      String missing = "";
      if (this.title == null) {
        missing += " title";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_Book(
          this.title,
          this.reviews);
    }
  }

}
